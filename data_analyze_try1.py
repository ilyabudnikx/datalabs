# -*- coding: utf-8 -*-
"""Копия блокнота "Analize"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TD5yMRD6HhnjRBNPtTh-Ihaf_N9uVfSG
"""

import numpy as np  # импорт модуля Numpy
import pandas as pd  # импорт модуля Pandas
from matplotlib import pyplot as plt  # импорт инструментов визуализации
from mpl_toolkits.mplot3d import Axes3D  # импорт дополнительной функциональности для построения 3D графиков
import seaborn as sns # импорт пакета Seaborn дял визуализации


exel_file = pd.read_excel('1.xlsx')



colormap = plt.cm.viridis
plt.figure(figsize=(20,20))
plt.title('Корреляция', y = 1.05, size = 20)
sns.heatmap(exel_file.corr(), square=True, annot=True, cmap=colormap)
plt.show()

exel_file2 = pd.read_excel('2.xlsx')

exel_file2.describe()

"""# Корреляции"""

exel_file2['lvl_inf'].corr(exel_file2['stc_ref']) #позитивная, растёт ставка, растёт и инфляция

exel_file2['lvl_inf'].corr(exel_file2['dollar']) #отрицательная, инфляция не относится к доллару

exel_file2.corr()

plt.figure(figsize=(16,10))
sns.heatmap(exel_file2.corr(), square=True, annot=True, cmap=colormap)
plt.show()

"""Множественная линейная регрессия

# Как надо
"""

from sklearn.linear_model import LinearRegression

data_reg = pd.DataFrame({
    'savings': [1.3, 2.3, 1.8, 1.4, 1.1, 1.2, 2.7, 1.9, 1.5, 2.1, 1.7],
    'income': [11, 19, 13, 14, 11, 17, 23, 11, 13, 20, 15],
    'property': [20, 14, 12, 8, 10, 6, 16, 15, 8, 17, 12]
})

data_reg.head(11)

model = LinearRegression()
model.fit(data_reg[['income', 'property']], data_reg['savings'])

print(f'Intercept: {model.intercept_} \n Коэф: {model.coef_}')

data_pred = data_reg[['income', 'property']]
data_pred

np.linalg.inv(data_pred.T @ data_pred) @ data_pred.T @ data_reg['savings']

plt.scatter(data_pred['income'], data_reg['savings'])
plt.plot(np.linspace(5, 25, num=5), model.predict(np.stack([np.linspace(5, 25, num=5), np.linspace(5, 25, num=5)], axis=1)))

plt.scatter(data_pred['property'], data_reg['savings'])
plt.plot(np.linspace(5, 20, num=5), model.predict(np.stack([np.linspace(5, 20, num=5), np.linspace(5, 20, num=5)], axis=1)))

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
model.predict(data_pred.loc[[0]]), data_reg.loc[0]['savings']
model.predict(data_pred.loc[[1]]), data_reg.loc[1]['savings']
model.score(data_reg[['income', 'property']], data_reg['savings'])

pr1 = np.array([[15, 18]])
print("Прогноз накопления семьи, имеющей доход 15 тыс.руб. и имущество стоимостью 18 тыс.руб: {}".format(model.predict(pr1)[0]))

pr2 = np.array([[20, 18]])
print("Если предположить, что доход семьи возрос на 5 тыс.руб., в то время как стоимость имущества не изменилась, то разница в накоплении измениться на {}".format(model.predict(pr2) - model.predict(pr1)))

pr3 = np.array([[15 + 3, 18 + 5]])
print("Оцените, как возрастут накопления семьи, если ее доход вырос на 3 тыс.руб., а стоимость имущества на 5 тыс.руб: {}".format(model.predict(pr3) - model.predict(pr1)))

pr4 = np.array([[15 * 1.1, 18]])
print("Определите, как изменятся накопления, если доход увеличится на 10%: {}".format(model.predict(pr4) - model.predict(pr1)))

data_reg.corr()

model.intercept_, model.coef_[0], model.coef_[1]

if model.coef_[0] / model.coef_[1] > 1:
    print("Доходы большее значемая переменная, чем имущество")
else:
    print("Имущество большее значемая переменная, чем доходы")

mean_absolute_error(model.predict(data_reg[['income', 'property']]), data_reg['savings'])

mean_squared_error(model.predict(data_reg[['income', 'property']]), data_reg['savings'])
